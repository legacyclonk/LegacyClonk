name: Autobuild

on:
  push:
    branches-ignore: 'build-test*'
    tags: '*'
  pull_request:
    branches: '*'

defaults:
  run:
    shell: bash

jobs:
  Autobuild:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            arch: x64
            env: Linux
    runs-on: ${{ matrix.os }}
    env:
      IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: "Setup Directories"
        run: mkdir output

      - name: "Configure Platform"
        run: |
          echo "CONFIG_SUFFIX=${{ matrix.env }}-${{ matrix.arch }}" >> $GITHUB_ENV
          autobuild/${{ matrix.env }}.sh

      - name: "Configure Platform Architecture"
        run: |
          autobuild/${{ matrix.env }}-${{ matrix.arch }}.sh

      - name: "Linux x86: Setup chroot"
        if: ${{ matrix.env == 'Linux' && matrix.arch == 'x86' }}
        run: |
          curl -L https://github.com/legacyclonk/ubuntu-1804-x86-chroot/releases/download/2020-09-26/chroot.tar.xz | sudo tar -xJ
          curl -L https://raw.githubusercontent.com/legacyclonk/ubuntu-1804-x86-chroot/master/setup_chroot.sh | sudo bash -e -
          sudo mkdir -p chroot/$PWD
          sudo mount --bind . chroot/$PWD

      - name: "Linux: Setup"
        if: ${{ matrix.env == 'Linux' }}
        run: $CHROOT autobuild/setup_linux.sh

      - name: "Mac: Work around libpng mess"
        if: ${{ matrix.env == 'Mac' }}
        run: sudo rm -r /Library/Frameworks/Mono.framework/Headers

      - name: "Windows: Setup VS Dev Environment"
        if: ${{ matrix.env == 'Windows' }}
        uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          arch: ${{ env.VS_ARCH }}

      - name: "Dependencies"
        run: |
          mkdir deps
          cd deps
          curl -L https://github.com/legacyclonk/deps/releases/download/2023-03-10/lc_deps-$CONFIG_SUFFIX.tar.gz | tar -xz
          ./fix_paths.sh

      - name: Configure
        run: |
          $CHROOT cmake -B build . $CMAKE_CONFIGURE_ARGS

      - name: "Enable Debugrec"
        if: ${{ matrix.config == 'Debugrec' }}
        run: |
          cmake -B build -DDEBUGREC=On
          echo "CONFIG_SUFFIX=${{ matrix.env }}-${{ matrix.arch }}-debugrec" >> $GITHUB_ENV

      - name: Build
        run: |
          $CHROOT cmake --build build $CMAKE_BUILD_ARGS

      - name: "Build c4gs"
        if: ${{ matrix.env == 'Linux' && matrix.arch == 'x64' }}
        run: |
          C4GROUP=$PWD/build/c4group tools/make_Graphics.c4g.sh
          C4GROUP=$PWD/build/c4group tools/make_System.c4g.sh

      - name: "Windows: Collect binaries"
        if: ${{ matrix.env == 'Windows' }}
        run: |
          cd build
          mv RelWithDebInfo/*.{exe,pdb} ../output

      - name: "Linux: Collect binaries"
        if: ${{ matrix.env == 'Linux' }}
        run: |
          cd build
          cp clonk c4group ../output

      - name: "Mac: Create Bundle"
        if: ${{ matrix.env == 'Mac' }}
        run: |
          cd build
          make DESTDIR=inst install
          mv inst/usr/local/c4group inst/usr/local/clonk.app ../output

      - name: "Publish Main Artifact"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CONFIG_SUFFIX }}
          path: output/*

      - name: "Publish System.c4g"
        if: ${{ matrix.env == 'Linux' && matrix.arch == 'x64' }}
        uses: actions/upload-artifact@v3
        with:
          name: System.c4g
          path: System.c4g

      - name: "Publish Graphics.c4g"
        if: ${{ matrix.env == 'Linux' && matrix.arch == 'x64' && matrix.config != 'Debugrec' }}
        uses: actions/upload-artifact@v3
        with:
          name: Graphics.c4g
          path: Graphics.c4g

      - name: "Pack: Windows"
        if: ${{ matrix.env == 'Windows' }}
        run: |
          cd output
          7z a LegacyClonk-$CONFIG_SUFFIX.zip *

      - name: "Pack: Linux"
        if: ${{ matrix.env == 'Linux' }}
        run: |
          cd output
          tar czf LegacyClonk-$CONFIG_SUFFIX.tar.gz *

      - name: "Pack: Mac"
        if: ${{ matrix.env == 'Mac' }}
        run: |
          cd output
          zip -r LegacyClonk-$CONFIG_SUFFIX.zip *

      - name: "Release: Windows / Mac"
        uses: ncipollo/release-action@v1.11.2
        if: ${{ env.IS_RELEASE == 'true' && matrix.env != 'Linux' }}
        with:
          artifacts: output/LegacyClonk-${{ env.CONFIG_SUFFIX }}.zip
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          generateReleaseNotes: true

      - name: "Release: Linux"
        uses: ncipollo/release-action@v1.11.2
        if: ${{ env.IS_RELEASE == 'true' && matrix.env == 'Linux' }}
        with:
          artifacts: output/LegacyClonk-${{ env.CONFIG_SUFFIX }}.tar.gz
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          generateReleaseNotes: true

      - name: "Release: c4gs"
        uses: ncipollo/release-action@v1.11.2
        if: ${{ env.IS_RELEASE == 'true' && matrix.env == 'Linux' && matrix.arch == 'x64' && matrix.config != 'Debugrec' }}
        with:
          artifacts: |
            System.c4g
            Graphics.c4g
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          generateReleaseNotes: true
